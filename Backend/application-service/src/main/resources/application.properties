spring.application.name=application-service

# Cloudinary (externalized)
cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api_key=${CLOUDINARY_API_KEY}
cloudinary.api_secret=${CLOUDINARY_API_SECRET}

# Downstream user-service HTTP endpoint (example)
user.service.url=${USER_SERVICE_HTTP_URL:http://user-service:8080}


#spring.application.name=user-service
#spring.datasource.url=jdbc:h2:file:./data/demo
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.ddl-auto=update
#spring.h2.console.enabled=true

# PostgreSQL Database Configuration (externalized)
# Prefer explicit URL if SPRING_DATASOURCE_URL is provided; else construct from parts.
# Supports optional extra params in DB_JDBC_PARAMS (include leading & if you set it, e.g. &channelBinding=require)
# PostgreSQL (all sensitive parts externalized)
spring.datasource.url=jdbc:postgresql://${DB_HOST:postgres}:${DB_PORT:5432}/${DB_NAME:mydb}?sslmode=${DB_SSL_MODE:disable}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate / JPA
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.show-sql=${JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:true}

# Mail (optional for services that send email)
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.test-connection=${MAIL_TEST_CONNECTION:false}

grpc.server.address=0.0.0.0
grpc.server.port=${GRPC_PORT:9097}
grpc.server.maxMessageSize=10485760


jwt.secret=${JWT_SECRET}
